AWSTemplateFormatVersion: 2010-09-09
Description: "- AWS Fargate Cluster for omgchat App \n- Application Load Balancer (ALB)\n  * ipv4 only\n  * internet facing\n  * certificate attached from ACM\n- ALB Security Group\n- Backend Target Group\n- Frontend Target Group\n- HTTPS Listener\n  * domain to frontend Target Group\n  * api.domain to backend Target Group\n- HTTP Listener\n  * redirect to HTTPS\n  #magic___^_^___line\n"
Parameters:
  NetworkingStack:
    Type: String
    Description: This is our base layer of networking components eg. VPC, Subnets
    Default: OmgNet
  CertificateArn:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /OmgCluster/CertificateArn
  #Frontend Properties
  FrontendPort:
    Type: Number
    Default: "3000"
  FrontendHealthCheckIntervalSeconds:
    Type: Number
    Default: "15"
  FrontendHealthCheckPath:
    Type: String
    Default: "/"
  FrontendHealthCheckPort:
    Type: String
    Default: "80"
  FrontendHealthCheckProtocol:
    Type: String
    Default: "HTTP"
  FrontendHealthCheckTimeoutSeconds:
    Type: Number
    Default: "5"
  FrontendHealthyThresholdCount:
    Type: Number
    Default: "2"
  FrontendUnhealthyThresholdCount:
    Type: Number
    Default: "2"
  #Backend Properties
  BackendPort:
    Type: Number
    Default: "4567"
  BackendHealthCheckIntervalSeconds:
    Type: String
    Default: "15"
  BackendHealthCheckPath:
    Type: String
    Default: "/api/health-check"
  BackendHealthCheckPort:
    Type: String
    Default: "4567"
  BackendHealthCheckProtocol:
    Type: String
    Default: "HTTP"
  BackendHealthCheckTimeoutSeconds:
    Type: Number
    Default: "5"
  BackendHealthyThresholdCount:
    Type: Number
    Default: "2"
  BackendUnhealthyThresholdCount:
    Type: Number
    Default: "2"
Resources:
  FargateCluster:
    #https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-cluster.html
    Type: 'AWS::ECS::Cluster'
    Properties:
      ClusterName: !Sub "${AWS::StackName}Cluster"
      CapacityProviders:
      - FARGATE
      ClusterSettings:
      - Name: containerInsights
        Value: enabled
      Configuration:
        ExecuteCommandConfiguration:
          Logging: DEFAULT
      ServiceConnectDefaults:
        Namespace: omgchat
  ALBSecGroup:
    #https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-security-group.html
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId:
        Fn::ImportValue: !Sub "${NetworkingStack}VpcId"
      GroupDescription: For omgchat ALB Ingress Traffic
      GroupName: !Sub "${AWS::StackName}ALBSecGroup"
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: '0.0.0.0/0'
        Description: Internet HTTP
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: '0.0.0.0/0'
        Description: Internet HTTPS
  ServiceSecGroup:
    # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-security-group.html
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${AWS::StackName}ServiceSecGroup"
      GroupDescription: Security for Fargate Services for Omgchat
      VpcId:
        Fn::ImportValue: !Sub ${NetworkingStack}VpcId
      SecurityGroupIngress:
      - IpProtocol: tcp
        SourceSecurityGroupId: !GetAtt ALBSecGroup.GroupId
        FromPort: !Ref BackendPort
        ToPort: !Ref BackendPort
        Description: ALB HTTP
  ALB:
    #https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-elasticloadbalancingv2-loadbalancer.html
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub "${AWS::StackName}ALB"
      IpAddressType: ipv4
      Type: application
      Scheme: internet-facing
      SecurityGroups:
      - !GetAtt ALBSecGroup.GroupId
      Subnets:
        Fn::Split:
        - ","
        - Fn::ImportValue: !Sub "${NetworkingStack}PublicSubnetIds"
      LoadBalancerAttributes:
      - Key: routing.http2.enabled
        Value: "true"
      - Key: routing.http.preserve_host_header.enabled
        Value: "false"
      - Key: deletion_protection.enabled
        Value: "true"
      - Key: load_balancing.cross_zone.enabled
        Value: "true"
      - Key: access_logs.s3.enabled
        Value: "false"
  FrontendTG:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: !Ref FrontendPort
      HealthCheckEnabled: true
      HealthCheckProtocol: !Ref FrontendHealthCheckProtocol
      HealthCheckIntervalSeconds: !Ref FrontendHealthCheckIntervalSeconds
      HealthCheckPath: !Ref FrontendHealthCheckPath
      HealthCheckPort: !Ref FrontendHealthCheckPort
      HealthCheckTimeoutSeconds: !Ref FrontendHealthCheckTimeoutSeconds
      HealthyThresholdCount: !Ref FrontendHealthyThresholdCount
      UnhealthyThresholdCount: !Ref FrontendUnhealthyThresholdCount
      IpAddressType: ipv4
      Matcher:
        HttpCode: 200
      Protocol: HTTP
      ProtocolVersion: HTTP2
      TargetType: ip
      TargetGroupAttributes:
      - Key: deregistration_delay.timeout_seconds
        Value: 0
      VpcId:
        Fn::ImportValue: !Sub ${NetworkingStack}VpcId
      Tags:
      - Key: target-group-name
        Value: frontend
  BackendTG:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: !Ref BackendPort
      HealthCheckEnabled: true
      HealthCheckProtocol: !Ref BackendHealthCheckProtocol
      HealthCheckIntervalSeconds: !Ref BackendHealthCheckIntervalSeconds
      HealthCheckPath: !Ref BackendHealthCheckPath
      HealthCheckPort: !Ref BackendHealthCheckPort
      HealthCheckTimeoutSeconds: !Ref BackendHealthCheckTimeoutSeconds
      HealthyThresholdCount: !Ref BackendHealthyThresholdCount
      UnhealthyThresholdCount: !Ref BackendUnhealthyThresholdCount
      IpAddressType: ipv4
      Matcher:
        HttpCode: 200
      Protocol: HTTP
      ProtocolVersion: HTTP2
      TargetType: ip
      TargetGroupAttributes:
      - Key: deregistration_delay.timeout_seconds
        Value: 0
      VpcId:
        Fn::ImportValue: !Sub ${NetworkingStack}VpcId
      Tags:
      - Key: target-group-name
        Value: backend
  HTTPListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      Protocol: "HTTP"
      Port: 80
      LoadBalancerArn: !Ref ALB
      DefaultActions:
      - Type: redirect
        RedirectConfig:
          StatusCode: "HTTP_301"
          Protocol: "HTTPS"
          Port: "443"
          Host: "#{host}"
          Path: "/#{path}"
          Query: "#{query}"
  HTTPSListener:
    # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-elasticloadbalancingv2-listener.html
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      Protocol: HTTPS
      Port: 443
      LoadBalancerArn: !Ref ALB
      Certificates:
      - CertificateArn: !Ref CertificateArn
      DefaultActions:
      - Type: forward
        TargetGroupArn: !Ref FrontendTG
  ALBListernerRule:
    # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-elasticloadbalancingv2-listenerrule.html
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Conditions:
      - Field: host-header
        HostHeaderConfig:
          Values:
          - api.omgchat.xyz
      Actions:
      - Type: forward
        TargetGroupArn: !Ref BackendTG
      ListenerArn: !Ref HTTPSListener
      Priority: 1
Outputs:
  ClusterName:
    Description: Cluster Name
    Value: !Ref FargateCluster
    Export:
      Name: !Sub "${AWS::StackName}ClusterName"
  BackendTGArn:
    Description: ALB Backend Target Group
    Value: !Ref BackendTG
    Export:
      Name: !Sub "${AWS::StackName}BackendTGArn"
  FrontendTGArn:
    Description: ALB Frontend Target Group
    Value: !Ref FrontendTG
    Export:
      Name: !Sub "${AWS::StackName}FrontendTGArn"
  ALBSecGroupId:
    Description: Security Group for services communication
    Value: !GetAtt ALBSecGroup.GroupId
    Export:
      Name: !Sub "${AWS::StackName}ALBSecGroupId"
  ServiceSecGroupId:
    Description: ALB HTTP
    Value: !GetAtt ServiceSecGroup.GroupId
    Export:
      Name: !Sub "${AWS::StackName}ServiceSecGroupId"

